---
title: Drawing Maps in R
author: Mengran Li
date: '2021-04-01'
slug: []
categories:
  - R
tags: []
authors: [Mengran-Li]
description: ''
featuredImage: ''
lastmod: '2021-04-01T19:20:23+01:00'
series: []
---

There are many packages to draw maps in R. Personally, I prefer to use *leaflet* and *ggplot2*. leaflet is a web application so that we can explore data interactively, and ggplot2 can merge data conveniently.

## ggplot2

The map border can be drawn by *borders()*. Let's look at an example of USA map:

```{r}
library(ggplot2)
library(maps)
ggplot() +
  borders("state")
```

How to add some shapes into the map? If you are familiar with ggplot2, it would be very easy.

Us.cities provides population and location informations of U.S. cities.

```{r}
data(us.cities)
knitr::kable(head(us.cities))
```

Us.cities is dataset of cities of USA. When we draw a map, we need 

Now we want to mark cities with population more than 500,000 in the map:

```{r}
us.cities <- subset(us.cities, pop > 500000)
ggplot(us.cities, aes(x = long, y = lat)) +
  geom_point()+
  borders("state")
```
Of course we can make colour represent population size:

```{r}
us.cities <- subset(us.cities, pop > 500000)
ggplot(us.cities, aes(x = long, y = lat)) +
  geom_point(aes(color = pop))+
  borders("state")
```

If you are not so satisfied with the Coordinate ratio, then:

```{r, warning=FALSE}
library(mapproj)
ggplot(us.cities, aes(x = long, y = lat)) +
  geom_point(aes(color = pop))+
  borders("state")+
  coord_map()
```
It is super suitable for a quick look at data map.

## Leaflet

Leaflet is a very popular tool based on java. It provides R package so that we can also use it.

```{r, echo = FALSE}
library(data.table)
library(tidyverse)
setwd("F:\\StreamFlow")
load("Stream.Rdata")
```

```{r, echo = FALSE}
Stream <- Stream[Q >= 0]
Stream_plot <- Stream[, c("Site", "Q", "DecYear", "Month", "Region")]
setkey(Stream_plot, Region)
Stream_mean <- Stream_plot[, mean(Q), by = Region]
names(Stream_mean) <- c("huc2", "mean")
rm(Stream, Stream_plot)
```


```{r, echo = FALSE, message = FALSE, results = FALSE}
bound <- sf::st_read(dsn = "F:/StreamFlow/wbdhu2_a_us_september2020.gdb")
bound <- subset(bound, !huc2 %in% c("19","20","21","22"))
bound <- full_join(bound, Stream_mean, by = c("huc2" = "huc2"))
```

```{r, echo = FALSE}
library(leaflet)
GetURL <- function(service, host = "basemap.nationalmap.gov") {
  sprintf("https://%s/arcgis/services/%s/MapServer/WmsServer", host, service)
}
pal <- colorNumeric(
  palette = colorRampPalette(c("skyblue", "darkblue"))(length(bound$mean)),
  domain = bound$mean
)
leaflet(bound) %>%
  setView(lng = -95, lat = 40, zoom = 4)%>%
  addPolygons(color = ~ pal(mean), weight = 1, smoothFactor = 0.5,
              opacity = 1.0, fillOpacity = 0.5,label = ~htmltools::htmlEscape(paste(huc2, name)),
              highlightOptions = highlightOptions(color = "white", weight = 2,
                                                  bringToFront = TRUE),
              group = "Region")%>%
  addCircleMarkers(data = Siteinfo,
    lng = ~dec_lon_va,
    lat = ~dec_lat_va,
    radius = ~3,
    stroke = FALSE,
    fill = TRUE,
    color = "red",
    fillOpacity = 0.4,
    group = "Site"
  )%>%
  addLegend("bottomright",
            pal = pal,
            values = ~mean,
            title = "Mean",
            labFormat = labelFormat(),
            opacity = 1,
            group="Region"
  ) %>%
  addWMSTiles(GetURL("USGSHydroCached"),layers = "0", group = "River")%>%
  addProviderTiles("Esri.WorldImagery",group = "Topography")%>%
  addLayersControl(
          overlayGroups =c("River", "Topography", "Region","Site"),
          options = layersControlOptions(collapsed=FALSE)
          )
  
```

